---
import { supabase } from '../../../../public/lib/supabase';
import Layout from '../../../layouts/Layout.astro';
import Menu from '../../../components/Menu.astro';

const url = new URL(Astro.request.url);
const id = url.searchParams.get('id');

let servicio = null;
let errorMessage = null;

if (!id) {
  errorMessage = 'No se proporcionó el ID del servicio.';
} else {
  try {
    // Obtener el servicio correspondiente al ID desde la base de datos
    const { data, error } = await supabase
      .from('planes_servicios')
      .select('nombre_servicio, plan, precio, incluye')
      .eq('id', id)
      .single();

    if (error) throw error;

    servicio = data;
  } catch (error) {
    errorMessage = error.message;
  }
}
---

<Layout title="Pago con tarjeta">
  <Menu />

  <div class="container mx-auto p-4 bg-white shadow-lg rounded-lg max-w-lg">
    <h1 class="text-2xl font-semibold text-center text-gray-800 mb-6">Pago con tarjeta</h1>

    {errorMessage ? (
      <p class="text-red-600 text-center">{`Error: ${errorMessage}`}</p>
    ) : servicio ? (
      <div>
        <p><strong>Servicio:</strong> {servicio.nombre_servicio}</p>
        <p><strong>Plan:</strong> {servicio.plan}</p>
        <p><strong>Precio:</strong> ${servicio.precio}</p>

        <form id="form-pago" class="mt-4 space-y-4">
          <input type="hidden" name="id" value={id} />

          <input name="nombre_tarjeta" type="text" placeholder="Nombre en la tarjeta" class="w-full p-2 border rounded" required />
          <input name="numero_tarjeta" type="text" placeholder="Número de tarjeta" class="w-full p-2 border rounded" required />
          <div class="flex gap-4">
            <input name="fecha" type="text" placeholder="MM/AA" class="w-full p-2 border rounded" required />
            <input name="cvv" type="text" placeholder="CVV" class="w-full p-2 border rounded" required />
          </div>
        </form>

        <!-- Botón fuera del formulario -->
        <button id="btn-pagar" class="bg-blue-500 text-white py-2 px-4 rounded w-full mt-4">
          Pagar ${servicio.precio}
        </button>
      </div>
    ) : (
      <p class="text-center">Cargando servicio...</p>
    )}
  </div>

  <script type="module" is:inline>
    import { supabase } from '../../../../public/lib/supabase';

    const urlParams = new URLSearchParams(window.location.search);
    const id = urlParams.get('id');


    function generarNumeroPago() {
      const fecha = new Date();
      const yyyymmdd = fecha.toISOString().slice(0, 10).replace(/-/g, '');
      const random = Math.floor(Math.random() * 900 + 100);
      return `${yyyymmdd}${random}`;
    }

    const btnPagar = document.getElementById('btn-pagar');
    const form = document.getElementById('form-pago');

    btnPagar.addEventListener('click', async () => {
      const nombre_tarjeta = form.nombre_tarjeta.value;
      const numero_tarjeta = form.numero_tarjeta.value;
      const fecha = form.fecha.value;
      const cvv = form.cvv.value;

      if (!nombre_tarjeta || !numero_tarjeta || !fecha || !cvv) {
        alert("Por favor, complete todos los campos.");
        return;
      }

      // Obtener el ID del usuario desde el localStorage
      const usuario_id = localStorage.getItem("usuario_id");
      if (!usuario_id) {
        alert("No se encontró el usuario. Por favor, inicia sesión.");
        return;
      }

      // Obtener los datos del usuario desde Supabase
      const { data: usuario, error: usuarioError } = await supabase
        .from('usuario')
        .select('nombre, correo')
        .eq('id', usuario_id)
        .single();

      if (usuarioError) {
        alert("Error al obtener datos del usuario: " + usuarioError.message);
        return;
      }

      const cliente_nombre = usuario.nombre;
      const cliente_correo = usuario.correo;

      const { data: planes, error: planesError } = await supabase
      .from('planes_servicios')
      .select('nombre_servicio, plan, precio, incluye')
      .eq('id', id)
      .single();

      if (planesError) {
        alert("Error al obtener datos del planes_servicios: " + planesError.message);
        return;
      }

// Usar los datos del servicio que ya cargamos
      const nombre_servicio = planes.nombre_servicio;
      const plan = planes.plan;
      const precio = planes.precio;
      const incluye = planes.incluye; // Puedes actualizar esto si es dinámico


      const numero_pago = generarNumeroPago();

      // Insertar el pago en la base de datos
      const { error } = await supabase.from('comprobante_pago').insert({
        numero_pago,
        cliente_nombre,
        cliente_correo,
        nombre_servicio,
        plan,
        incluye,
        precio,
        metodo_pago: "Tarjeta",
        usuario_id,
      });

      // Mostrar la alerta si se guarda correctamente
      if (error) {
        alert("Error al guardar el comprobante: " + error.message);
      } else {
        alert("¡Pago registrado con éxito!");
        window.location.href = `/Servicios/Compra/pago_realizado?numero_pago=${numero_pago}`;

      }
    });
  </script>
</Layout>
